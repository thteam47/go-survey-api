// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.7.1
// source: survey-api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SurveyServiceClient is the client API for SurveyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SurveyServiceClient interface {
	CreateSurvey(ctx context.Context, in *SurveyRequest, opts ...grpc.CallOption) (*SurveyResponse, error)
	UpdateSurveyById(ctx context.Context, in *UpdateSurveyRequest, opts ...grpc.CallOption) (*StringResponse, error)
	GetAllSurvey(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListSurveyResponse, error)
	GetSurveyById(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*SurveyResponse, error)
	GetSurveyByUserJoin(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*ListSurveyResponse, error)
	GetSurveyByUserCreate(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*ListSurveyResponse, error)
	ApproveBySurveyId(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringResponse, error)
	DeleteSurveyById(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringResponse, error)
	CreateCategory(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryResponse, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*CategoryResponse, error)
	GetAllCategory(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCategoryResponse, error)
	DeleteCategory(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringResponse, error)
	GetCategory(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*CategoryResponse, error)
}

type surveyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSurveyServiceClient(cc grpc.ClientConnInterface) SurveyServiceClient {
	return &surveyServiceClient{cc}
}

func (c *surveyServiceClient) CreateSurvey(ctx context.Context, in *SurveyRequest, opts ...grpc.CallOption) (*SurveyResponse, error) {
	out := new(SurveyResponse)
	err := c.cc.Invoke(ctx, "/survey_api.SurveyService/CreateSurvey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) UpdateSurveyById(ctx context.Context, in *UpdateSurveyRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/survey_api.SurveyService/UpdateSurveyById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) GetAllSurvey(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListSurveyResponse, error) {
	out := new(ListSurveyResponse)
	err := c.cc.Invoke(ctx, "/survey_api.SurveyService/GetAllSurvey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) GetSurveyById(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*SurveyResponse, error) {
	out := new(SurveyResponse)
	err := c.cc.Invoke(ctx, "/survey_api.SurveyService/GetSurveyById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) GetSurveyByUserJoin(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*ListSurveyResponse, error) {
	out := new(ListSurveyResponse)
	err := c.cc.Invoke(ctx, "/survey_api.SurveyService/GetSurveyByUserJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) GetSurveyByUserCreate(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*ListSurveyResponse, error) {
	out := new(ListSurveyResponse)
	err := c.cc.Invoke(ctx, "/survey_api.SurveyService/GetSurveyByUserCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) ApproveBySurveyId(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/survey_api.SurveyService/ApproveBySurveyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) DeleteSurveyById(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/survey_api.SurveyService/DeleteSurveyById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) CreateCategory(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryResponse, error) {
	out := new(CategoryResponse)
	err := c.cc.Invoke(ctx, "/survey_api.SurveyService/CreateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*CategoryResponse, error) {
	out := new(CategoryResponse)
	err := c.cc.Invoke(ctx, "/survey_api.SurveyService/UpdateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) GetAllCategory(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCategoryResponse, error) {
	out := new(ListCategoryResponse)
	err := c.cc.Invoke(ctx, "/survey_api.SurveyService/GetAllCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) DeleteCategory(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/survey_api.SurveyService/DeleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) GetCategory(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*CategoryResponse, error) {
	out := new(CategoryResponse)
	err := c.cc.Invoke(ctx, "/survey_api.SurveyService/GetCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SurveyServiceServer is the server API for SurveyService service.
// All implementations must embed UnimplementedSurveyServiceServer
// for forward compatibility
type SurveyServiceServer interface {
	CreateSurvey(context.Context, *SurveyRequest) (*SurveyResponse, error)
	UpdateSurveyById(context.Context, *UpdateSurveyRequest) (*StringResponse, error)
	GetAllSurvey(context.Context, *ListRequest) (*ListSurveyResponse, error)
	GetSurveyById(context.Context, *StringRequest) (*SurveyResponse, error)
	GetSurveyByUserJoin(context.Context, *StringRequest) (*ListSurveyResponse, error)
	GetSurveyByUserCreate(context.Context, *StringRequest) (*ListSurveyResponse, error)
	ApproveBySurveyId(context.Context, *StringRequest) (*StringResponse, error)
	DeleteSurveyById(context.Context, *StringRequest) (*StringResponse, error)
	CreateCategory(context.Context, *CategoryRequest) (*CategoryResponse, error)
	UpdateCategory(context.Context, *UpdateCategoryRequest) (*CategoryResponse, error)
	GetAllCategory(context.Context, *ListRequest) (*ListCategoryResponse, error)
	DeleteCategory(context.Context, *StringRequest) (*StringResponse, error)
	GetCategory(context.Context, *StringRequest) (*CategoryResponse, error)
	mustEmbedUnimplementedSurveyServiceServer()
}

// UnimplementedSurveyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSurveyServiceServer struct {
}

func (UnimplementedSurveyServiceServer) CreateSurvey(context.Context, *SurveyRequest) (*SurveyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSurvey not implemented")
}
func (UnimplementedSurveyServiceServer) UpdateSurveyById(context.Context, *UpdateSurveyRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSurveyById not implemented")
}
func (UnimplementedSurveyServiceServer) GetAllSurvey(context.Context, *ListRequest) (*ListSurveyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSurvey not implemented")
}
func (UnimplementedSurveyServiceServer) GetSurveyById(context.Context, *StringRequest) (*SurveyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyById not implemented")
}
func (UnimplementedSurveyServiceServer) GetSurveyByUserJoin(context.Context, *StringRequest) (*ListSurveyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyByUserJoin not implemented")
}
func (UnimplementedSurveyServiceServer) GetSurveyByUserCreate(context.Context, *StringRequest) (*ListSurveyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyByUserCreate not implemented")
}
func (UnimplementedSurveyServiceServer) ApproveBySurveyId(context.Context, *StringRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveBySurveyId not implemented")
}
func (UnimplementedSurveyServiceServer) DeleteSurveyById(context.Context, *StringRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSurveyById not implemented")
}
func (UnimplementedSurveyServiceServer) CreateCategory(context.Context, *CategoryRequest) (*CategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedSurveyServiceServer) UpdateCategory(context.Context, *UpdateCategoryRequest) (*CategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedSurveyServiceServer) GetAllCategory(context.Context, *ListRequest) (*ListCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCategory not implemented")
}
func (UnimplementedSurveyServiceServer) DeleteCategory(context.Context, *StringRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedSurveyServiceServer) GetCategory(context.Context, *StringRequest) (*CategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedSurveyServiceServer) mustEmbedUnimplementedSurveyServiceServer() {}

// UnsafeSurveyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SurveyServiceServer will
// result in compilation errors.
type UnsafeSurveyServiceServer interface {
	mustEmbedUnimplementedSurveyServiceServer()
}

func RegisterSurveyServiceServer(s grpc.ServiceRegistrar, srv SurveyServiceServer) {
	s.RegisterService(&SurveyService_ServiceDesc, srv)
}

func _SurveyService_CreateSurvey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).CreateSurvey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/survey_api.SurveyService/CreateSurvey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).CreateSurvey(ctx, req.(*SurveyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_UpdateSurveyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSurveyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).UpdateSurveyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/survey_api.SurveyService/UpdateSurveyById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).UpdateSurveyById(ctx, req.(*UpdateSurveyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_GetAllSurvey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).GetAllSurvey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/survey_api.SurveyService/GetAllSurvey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).GetAllSurvey(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_GetSurveyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).GetSurveyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/survey_api.SurveyService/GetSurveyById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).GetSurveyById(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_GetSurveyByUserJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).GetSurveyByUserJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/survey_api.SurveyService/GetSurveyByUserJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).GetSurveyByUserJoin(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_GetSurveyByUserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).GetSurveyByUserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/survey_api.SurveyService/GetSurveyByUserCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).GetSurveyByUserCreate(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_ApproveBySurveyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).ApproveBySurveyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/survey_api.SurveyService/ApproveBySurveyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).ApproveBySurveyId(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_DeleteSurveyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).DeleteSurveyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/survey_api.SurveyService/DeleteSurveyById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).DeleteSurveyById(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/survey_api.SurveyService/CreateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).CreateCategory(ctx, req.(*CategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/survey_api.SurveyService/UpdateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).UpdateCategory(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_GetAllCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).GetAllCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/survey_api.SurveyService/GetAllCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).GetAllCategory(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/survey_api.SurveyService/DeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).DeleteCategory(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/survey_api.SurveyService/GetCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).GetCategory(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SurveyService_ServiceDesc is the grpc.ServiceDesc for SurveyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SurveyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "survey_api.SurveyService",
	HandlerType: (*SurveyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSurvey",
			Handler:    _SurveyService_CreateSurvey_Handler,
		},
		{
			MethodName: "UpdateSurveyById",
			Handler:    _SurveyService_UpdateSurveyById_Handler,
		},
		{
			MethodName: "GetAllSurvey",
			Handler:    _SurveyService_GetAllSurvey_Handler,
		},
		{
			MethodName: "GetSurveyById",
			Handler:    _SurveyService_GetSurveyById_Handler,
		},
		{
			MethodName: "GetSurveyByUserJoin",
			Handler:    _SurveyService_GetSurveyByUserJoin_Handler,
		},
		{
			MethodName: "GetSurveyByUserCreate",
			Handler:    _SurveyService_GetSurveyByUserCreate_Handler,
		},
		{
			MethodName: "ApproveBySurveyId",
			Handler:    _SurveyService_ApproveBySurveyId_Handler,
		},
		{
			MethodName: "DeleteSurveyById",
			Handler:    _SurveyService_DeleteSurveyById_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _SurveyService_CreateCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _SurveyService_UpdateCategory_Handler,
		},
		{
			MethodName: "GetAllCategory",
			Handler:    _SurveyService_GetAllCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _SurveyService_DeleteCategory_Handler,
		},
		{
			MethodName: "GetCategory",
			Handler:    _SurveyService_GetCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "survey-api.proto",
}
